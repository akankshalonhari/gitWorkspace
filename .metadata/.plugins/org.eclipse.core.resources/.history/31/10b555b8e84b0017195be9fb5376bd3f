package SamplesProject.examples;
import java.util.Arrays;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/*** Hello world! ***/

@RestController
@EnableAutoConfiguration
public class App 
{	
	@RequestMapping("/")
    String hello() {
        return "Hello welcome to Akanksha`s world!";
    }
	
    public static void main(String[] args){
        SpringApplication.run(App.class, args);
        //int[] input = new int[]{10, 80, 30, 90, 40, 50, 70};
        //int result = quickSort(input, 0, input.length-1, 3);
        //System.out.print("k-th smallest element in the array : " + result);
        
        int[] A = new int[15];
        A[0]=7;
        A[1]=8;
        A[2]=2;
        A[3]=9;
        A[4]=5;
        int[] B = new int[]{4, 6, 3, 1};
        System.out.println("A : " + Arrays.toString(A));
        System.out.println("B : " + Arrays.toString(B));
        Arrays.toString(mergeArrs(A, B));
	}
    

    public static int quickSort(int[] input, int start, int end, int k){
	    //Checking for k to within bounds start and end always
    	if((k>0) && (k<=(end-start)+1)){
	    	int pIndex = partition(input, start, end);
	    	//if partition index is k
	    	if(k == pIndex)
	    		return input[pIndex];
	    	//only one of the calls will be executed , thus only logN time taken
	    	if(k < pIndex){
	    		 System.out.println(Arrays.toString(input));
	    		return quickSort(input, start, pIndex-1, k);
	    	} else {
	    		System.out.println(Arrays.toString(input));
	    		return quickSort(input, pIndex+1, end, k);
	    	}
	    }
    	//if k is out of array bound, return max value
	    return Integer.MAX_VALUE;
    }

    /* for every partition sort values to its right and left */	   
	public static int partition(int[] input, int start, int end){
		System.out.println(" start "+ start + " end " + end);
		int pivot = input[end];
	    int i=start-1;
	    int j=start;
	    while(j<end){
	    	//move the smaller elements to left of i i.e all elements ending at i are sorted  
	    	if(input[j] < pivot){
	    		i++;
	    		int temp = input[j];
	    		input[j] = input[i];
	    		input[i] = temp;
	    	}
	    	j++;
	    }	
	    int temp = input[end];
	    System.out.println(" temp " + temp + " i/p end " + input[end] + " i/p i+1 " + i);
	    input[end] = input[i+1];
	    input[i+1] = temp;
	    	
	    return i+1;
	}


	public static int[] mergeArrs(int[] A , int[] B) {
		int indexA = 0;
		while(indexA < A.length){
			if(A[indexA] != 0){
				indexA++;
			}
		}
		int indexB = B.length-1;
		int totalIndex = (indexA + indexB) - 1;
		System.out.println(" sizes " + indexA + "  " + indexB + "   " + totalIndex);
		while(indexB >= 0) {
			if((indexA >= 0) && (A[indexA] > B[indexB])) {
				A[totalIndex] = A[indexA]; //copying A's element to end
				indexA--;
			} else {
				A[totalIndex] = B[indexB]; //copying B's element to end
				indexB--;
			}
			indexB--;
		}
		System.out.println("Final : " + Arrays.toString(A));
		return A;
	}
}