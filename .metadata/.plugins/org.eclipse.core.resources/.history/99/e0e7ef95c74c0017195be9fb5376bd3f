package SamplesProject.examples;
import java.util.Arrays;
import java.util.Iterator;
import java.util.PriorityQueue;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/*** Hello world! ***/

@RestController
@EnableAutoConfiguration
public class App 
{	
	@RequestMapping("/")
    String hello() {
        return "Hello welcome to Akanksha`s world!";
    }
	
    public static void main(String[] args){
        SpringApplication.run(App.class, args);
        String[] strings = new String[]{"at","","","","ball","","","car","","","dad", "",""};
        System.out.println(" Index of search string is : " + searchSparse(strings, "ef"));
    }
    
    public static int searchSparse(String[] strings, String search){
    	
    	if(strings == null || search == null || search == ""){
    		return -1;
    	}
    	
    	return search(strings, 0, strings.length-1, search);
    }
    
    private static int search(String[] strings, int start, int end, String search){
    	int index = -1;
    	if(start > end)
    		return index;
    	int mid = (start + end)/2;
    	
    	//if strings[mid] is an empty string, we have to determine which side to recurse
    	if(strings[mid].isEmpty()){
    		int left = mid-1;
    		int right = mid+1;
    		
    		while(true){
    			if(left < start && right > end){
    				return -1;
    			} else if(right <= end && !strings[right].isEmpty()){ //keep moving right till we find non-empty string from mid
    				mid = right;
    				break;
    			} else if(left >= start && !strings[left].isEmpty()){ //keep moving left till we find non-empty string from mid
    				mid = left;
    				break;
    			}
    			right++;
    			left++;
    		}
    	}
    	
    	if(strings[mid].equals(search)){
    		return mid;
    	} else if(strings[mid].compareTo(search) < 0){ // string[mid] is smaller than search str
    		return search(strings, mid+1, end, search); //search right arr
    	} else {
    		return search(strings, start, mid-1, search); //search left arr
    	}
    }
}