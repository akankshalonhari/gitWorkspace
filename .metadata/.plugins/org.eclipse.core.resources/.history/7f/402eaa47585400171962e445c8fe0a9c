package SamplesProject.examples;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

public class RandomImp {
	
	public static HashMap<String, ArrayList<String>> phoneMap = new HashMap<String, ArrayList<String>>(); 
	   
	public RandomImp(){
		 String[] strings = new String[]{"dale", "lead", "eadl", "kjui",  "listen", "silent", "cheating", "eathcing"};
	     System.out.println("result " + groupAnagrams(strings));
	     
	     ArrayList<String> r1 = new ArrayList<String>() {{
	            add("a");
	            add("b");
	            add("c");
	        }};
	        ArrayList<String> r2 = new ArrayList<String>() {{
	            add("d");
	            add("e");
	            add("f");
	        }};
	        ArrayList<String> r3 = new ArrayList<String>() {{
	            add("g");
	            add("h");
	            add("i");
	        }};
	        phoneMap.put("2", r1);
	        phoneMap.put("3", r2);
	        phoneMap.put("4", r3);
	        
	        letterCombinations("234");
	}
	
	 /* Function to create groups of anagrams in a given list */
	 public static List<List<String>> groupAnagrams(String[] strs) {
	    	List<List<String>> result = new ArrayList<List<String>>();
	     
	    	String[][] resultN =  new String[100][100];;
	        HashMap<String, ArrayList<String>> map = new HashMap<String, ArrayList<String>>();
	        for(String str: strs){
	        	
	        	/* Creating signature of n-letters word to create a key*/
	        	char[] arr = new char[26];
	            for(char s : str.toCharArray()){
	            	arr[s-'a']++;
	            }
	  
	            String ns = new String(arr);
	            if(map.containsKey(ns)){
	                map.get(ns).add(str);
	            }else{
	                ArrayList<String> al = new ArrayList<String>();
	                al.add(str);
	                map.put(ns, al);
	            }
	        }
	     
	       result.addAll(map.values());
	    
	        //trial, ignore the below conversion
	        Object[] res1 = map.values().toArray();
	        int k=0;
			for(ArrayList<String> v : map.values()){
		        String[] n = new String[v.size()];
	        	int i =0;
	        	for(String j : v){
	        		n[i] = j;
	        		i++;
	        	}
	        	resultN[k] = n;
	        	k++;
	        }
	        System.out.println("result 0 " + Arrays.toString(resultN[0]));
	        System.out.println("result 1 " + Arrays.toString(resultN[1]));
	        System.out.println("result 2 " + Arrays.toString(resultN[2]));
	            
	        
	        return result;
	    }
	 
	 
	 public static List<String> letterCombinations(String digits) {
	        List<String> result = null;
	        if(digits.length() == 1){
	            result = phoneMap.get(String.valueOf(digits.charAt(0)));
	            System.out.println("result 1" + result);
	        } else {
	            List<String> current = phoneMap.get(String.valueOf(digits.charAt(0)));
	            List<String> next = letterCombinations(digits.substring(1));
	            System.out.println("curr " + current.toString() + " next " + next.toString());
	            result = new ArrayList<String>();
	            for(int i=0; i<current.size() ;i++){
	                for(int j=0; j<next.size() ;j++){
	                    result.add(current.get(i) + next.get(j));
	                    System.out.println("result 2" + result);
	                }            
	            }
	        }
	        System.out.println("result " + result);
	        return result;
	  }
	
}
